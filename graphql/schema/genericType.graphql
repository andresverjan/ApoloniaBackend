scalar Date

type genericApplication {
  id: Int
  application: Application
  campos: [String]
  totalRegistros: Int
}

type genericResponse {
  success: Boolean!
  message: String
  internalMessage: String
}

type CampoValorOutput {
  id: Int!
  nombre: String!
  valor: String
}

input CampoValor {
  id: Int!
  nombre: String!
  valor: String
  tipoCampoId: Int
}

input genericApplicationCampos {
  id: Int
  application: ApplicationInput #Ya definido en Applications.
  campos: [CampoValor]
}

input genericApplicationCamposUpdate {
  id: Int
  application: ApplicationInput #Ya definido en Applications.
  campos: [CampoValor]
}

input genericApplicationCamposDelete {
  id: Int!
  application: ApplicationInput
}

input genericApplicationLimitFilter {
  pagina: Int!
  limite: Int!
}

input genericApplicationInputFilter {
  id: Int!
  campos: [CampoValor]
}

input genericApplicationOrderBy {
  id: Int!
}

type Query {
  genericList(
    filter: genericApplicationInputFilter
    order: genericApplicationOrderBy
    limit: genericApplicationLimitFilter
  ): [genericApplication!]
}

type Mutation {
  genericSave(application: genericApplicationCampos): genericResponse
  genericUpdate(application: genericApplicationCamposUpdate): genericResponse
  genericDelete(application: genericApplicationCamposDelete): genericResponse
}
